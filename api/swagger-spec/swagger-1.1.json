{
    "swagger": "2.0",
    "info": {
        "title": "CircleCI API",
        "version": "v1.1",
        "description": "The CircleCI API is a fully-featured JSON API that\nallows you to access all information and trigger all actions in CircleCI.\n",
        "license": {
            "name": "The 3-Clause BSD License",
            "url": "https://opensource.org/licenses/BSD-3-Clause"
        }
    },
    "externalDocs": {
        "url": "https://circleci.com/docs/api/v1-reference/",
        "description": "CircleCI API v1.1 Reference"
    },
    "host": "circleci.com",
    "basePath": "/api/v1.1",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json; charset=utf-8"
    ],
    "produces": [
        "application/json"
    ],
    "security": [
        {
            "apikey": []
        },
        {
            "basicAuth": []
        }
    ],
    "securityDefinitions": {
        "apikey": {
            "type": "apiKey",
            "in": "query",
            "name": "circle-token"
        },
        "basicAuth": {
            "type": "basic"
        }
    },
    "paths": {
        "/me": {
            "get": {
                "description": "Provides information about the signed in user.",
                "operationId": "me",
                "responses": {
                    "200": {
                        "description": "signed in user",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        },
        "/projects": {
            "get": {
                "description": "List of all the projects you''re following on CircleCI, with build information organized by branch.",
                "operationId": "projects",
                "responses": {
                    "200": {
                        "description": "List of all the projects you''re following on CircleCI",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Project"
                            },
                            "type": "array"
                        }
                    }
                }
            }
        },
        "/project/{username}/{project}": {
            "get": {
                "description": "Build summary for each of the last 30 builds for a single git repo.",
                "parameters": [
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/filter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Build summary for each of the last 30 builds",
                        "schema": {
                            "$ref": "#/definitions/Builds"
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/parameters/username"
                },
                {
                    "$ref": "#/parameters/project"
                }
            ],
            "post": {
                "description": "Triggers a new build, returns a summary of the build.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "properties": {
                                "build_parameters": {
                                    "$ref": "#/definitions/BuildParameters"
                                },
                                "parallel": {
                                    "$ref": "#/definitions/Parallel"
                                },
                                "revision": {
                                    "$ref": "#/definitions/Revision"
                                },
                                "tag": {
                                    "$ref": "#/definitions/Tag"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "returns a summary of the build",
                        "schema": {
                            "$ref": "#/definitions/BuildSummary"
                        }
                    }
                }
            }
        },
        "/project/{username}/{project}/build-cache": {
            "delete": {
                "description": "Clears the cache for a project.",
                "responses": {
                    "200": {
                        "description": "status message",
                        "schema": {
                            "properties": {
                                "status": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/parameters/username"
                },
                {
                    "$ref": "#/parameters/project"
                }
            ]
        },
        "/project/{username}/{project}/checkout-key": {
            "get": {
                "description": "Lists checkout keys.",
                "responses": {
                    "200": {
                        "description": "checkout keys",
                        "schema": {
                            "$ref": "#/definitions/Keys"
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/parameters/username"
                },
                {
                    "$ref": "#/parameters/project"
                }
            ],
            "post": {
                "description": "Creates a new checkout key.\nOnly usable with a user API token.\n",
                "parameters": [
                    {
                        "description": "The type of key to create. Can be 'deploy-key' or 'github-user-key'.",
                        "in": "body",
                        "name": "type",
                        "schema": {
                            "enum": [
                                "deploy-key",
                                "github-user-key"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/responses/key"
                    }
                }
            }
        },
        "/project/{username}/{project}/checkout-key/{fingerprint}": {
            "delete": {
                "description": "Delete a checkout key.",
                "responses": {
                    "200": {
                        "description": "status message",
                        "schema": {
                            "properties": {
                                "message": {
                                    "enum": [
                                        "OK"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "get": {
                "description": "Get a checkout key.",
                "responses": {
                    "200": {
                        "$ref": "#/responses/key"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/parameters/username"
                },
                {
                    "$ref": "#/parameters/project"
                },
                {
                    "$ref": "#/parameters/fingerprint"
                }
            ]
        },
        "/project/{username}/{project}/envvar": {
            "get": {
                "description": "Lists the environment variables for :project",
                "responses": {
                    "200": {
                        "$ref": "#/responses/envvars"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/parameters/username"
                },
                {
                    "$ref": "#/parameters/project"
                }
            ],
            "post": {
                "description": "Creates a new environment variable",
                "responses": {
                    "200": {
                        "$ref": "#/responses/envvar"
                    }
                }
            }
        },
        "/project/{username}/{project}/envvar/{name}": {
            "delete": {
                "description": "Deletes the environment variable named ':name'",
                "responses": {
                    "200": {
                        "description": "Deletes the environment variable named ':name'",
                        "schema": {
                            "properties": {
                                "message": {
                                    "enum": [
                                        "OK"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "get": {
                "description": "Gets the hidden value of environment variable :name",
                "responses": {
                    "200": {
                        "$ref": "#/responses/envvar"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/parameters/username"
                },
                {
                    "$ref": "#/parameters/project"
                },
                {
                    "$ref": "#/parameters/envvar_name"
                }
            ]
        },
        "/project/{username}/{project}/ssh-key": {
            "parameters": [
                {
                    "$ref": "#/parameters/username"
                },
                {
                    "$ref": "#/parameters/project"
                }
            ],
            "post": {
                "description": "Create an ssh key used to access external systems that require SSH key-based authentication",
                "parameters": [
                    {
                        "enum": [
                            "application/json"
                        ],
                        "in": "header",
                        "name": "Content-Type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "properties": {
                                "hostname": {
                                    "type": "string"
                                },
                                "private_key": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "no response expected",
                        "examples": {
                            "application/json": {
                                "message": "a private key is required"
                            }
                        },
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/project/{username}/{project}/tree/{branch}": {
            "parameters": [
                {
                    "$ref": "#/parameters/username"
                },
                {
                    "$ref": "#/parameters/project"
                },
                {
                    "$ref": "#/parameters/branch"
                }
            ],
            "post": {
                "description": "Triggers a new build, returns a summary of the build.\nOptional build parameters can be set using an experimental API.\n\nNote: |\n  For more about build parameters,\n  read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/)\n",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "properties": {
                                "build_parameters": {
                                    "$ref": "#/definitions/BuildParameters"
                                },
                                "parallel": {
                                    "$ref": "#/definitions/Parallel"
                                },
                                "revision": {
                                    "$ref": "#/definitions/Revision"
                                }
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "returns a summary of the build",
                        "headers": {
                            "Location": {
                                "format": "uri",
                                "type": "string"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/Build"
                        }
                    }
                }
            }
        },
        "/project/{username}/{project}/{build_num}": {
            "get": {
                "description": "Full details for a single build. The response includes all of the fields from the build summary.\nThis is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case\nthis object is the value to a key named 'payload'.\n",
                "responses": {
                    "200": {
                        "description": "Full details for a single build",
                        "schema": {
                            "$ref": "#/definitions/BuildDetail"
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/parameters/username"
                },
                {
                    "$ref": "#/parameters/project"
                },
                {
                    "$ref": "#/parameters/build_num"
                }
            ]
        },
        "/project/{username}/{project}/{build_num}/artifacts": {
            "get": {
                "description": "List the artifacts produced by a given build.",
                "responses": {
                    "200": {
                        "description": "List the artifacts produced by a given build",
                        "schema": {
                            "$ref": "#/definitions/Artifacts"
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/parameters/username"
                },
                {
                    "$ref": "#/parameters/project"
                },
                {
                    "$ref": "#/parameters/build_num"
                }
            ]
        },
        "/project/{username}/{project}/{build_num}/cancel": {
            "parameters": [
                {
                    "$ref": "#/parameters/username"
                },
                {
                    "$ref": "#/parameters/project"
                },
                {
                    "$ref": "#/parameters/build_num"
                }
            ],
            "post": {
                "description": "Cancels the build, returns a summary of the build.",
                "responses": {
                    "200": {
                        "description": "returns a summary of the build",
                        "schema": {
                            "$ref": "#/definitions/Build"
                        }
                    }
                }
            }
        },
        "/project/{username}/{project}/{build_num}/retry": {
            "parameters": [
                {
                    "$ref": "#/parameters/username"
                },
                {
                    "$ref": "#/parameters/project"
                },
                {
                    "$ref": "#/parameters/build_num"
                }
            ],
            "post": {
                "description": "Retries the build, returns a summary of the new build.",
                "responses": {
                    "200": {
                        "description": "returns a summary of the new build",
                        "schema": {
                            "$ref": "#/definitions/Build"
                        }
                    }
                }
            }
        },
        "/project/{username}/{project}/{build_num}/tests": {
            "get": {
                "description": "Provides test metadata for a build\nNote: |\n  [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/)\n",
                "responses": {
                    "200": {
                        "description": "test metadata for a build",
                        "schema": {
                            "$ref": "#/definitions/Tests"
                        }
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/parameters/username"
                },
                {
                    "$ref": "#/parameters/project"
                },
                {
                    "$ref": "#/parameters/build_num"
                }
            ]
        },
        "/recent-builds": {
            "get": {
                "description": "Build summary for each of the last 30 recent builds, ordered by build_num.",
                "parameters": [
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/offset"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Build summary for each of the last 30 recent builds",
                        "schema": {
                            "$ref": "#/definitions/Builds"
                        }
                    }
                }
            }
        },
        "/user/heroku-key": {
            "post": {
                "description": "Adds your Heroku API key to CircleCI, takes apikey as form param name.",
                "responses": {
                    "403": {
                        "description": "Your Heroku API key is invalid.",
                        "schema": {
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Artifact": {
            "properties": {
                "node_index": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "pretty_path": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Artifacts": {
            "items": {
                "$ref": "#/definitions/Artifact"
            },
            "type": "array"
        },
        "Aws": {
            "properties": {
                "keypair": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Build": {
            "properties": {
                "body": {
                    "description": "commit message body",
                    "type": "string"
                },
                "branch": {
                    "type": "string"
                },
                "build_time_millis": {
                    "type": "integer"
                },
                "build_url": {
                    "format": "uri",
                    "type": "string"
                },
                "committer_email": {
                    "format": "email",
                    "type": "string"
                },
                "committer_name": {
                    "type": "string"
                },
                "dont_build": {
                    "description": "reason why we didn't build, if we didn't build",
                    "type": "string"
                },
                "lifecycle": {
                    "enum": [
                        "finished",
                        "not_run",
                        "not_running",
                        "queued",
                        "running",
                        "scheduled"
                    ],
                    "type": "string"
                },
                "previous": {
                    "$ref": "#/definitions/PreviousBuild"
                },
                "queued_at": {
                    "description": "time build was queued",
                    "format": "date-time",
                    "type": "string"
                },
                "reponame": {
                    "type": "string"
                },
                "retry_of": {
                    "description": "build_num of the build this is a retry of",
                    "type": "integer"
                },
                "start_time": {
                    "description": "time build started",
                    "format": "date-time",
                    "type": "string"
                },
                "stop_time": {
                    "description": "time build finished",
                    "format": "date-time",
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "vcs_url": {
                    "format": "uri",
                    "type": "string"
                },
                "why": {
                    "description": "short string explaining the reason we built",
                    "type": "string"
                },
                "workflows": {
                    "$ref": "#/definitions/Workflows"
                }
            },
            "type": "object"
        },
        "Workflows": {
            "properties": {
                "job_name": {
                    "type": "string"
                },
                "job_id": {
                    "type": "string"
                },
                "workflow_id": {
                    "type": "string"
                },
                "workspace_id": {
                    "type": "string"
                },
                "upstream_job_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "upstream_concurrency_map": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "workflow_name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BuildDetail": {
            "description": "previous build",
            "properties": {
                "all_commit_details": {
                    "$ref": "#/definitions/CommitDetails"
                },
                "compare": {
                    "format": "uri",
                    "type": "string"
                },
                "job_name": {
                    "type": "string"
                },
                "node": {
                    "type": "null"
                },
                "previous_successful_build": {
                    "$ref": "#/definitions/PreviousBuild"
                },
                "retries": {
                    "type": "boolean"
                },
                "ssh_enabled": {
                    "type": "boolean"
                },
                "timedout": {
                    "type": "boolean"
                },
                "usage_queued_at": {
                    "format": "date-time",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/User"
                }
            },
            "type": "object"
        },
        "BuildParameters": {
            "description": "Additional environment variables to inject into the build environment. A map of names to values.",
            "type": "object"
        },
        "BuildSummary": {
            "properties": {
                "added_at": {
                    "format": "date-time",
                    "type": "string"
                },
                "build_num": {
                    "type": "integer"
                },
                "outcome": {
                    "enum": [
                        "finished",
                        "not_run",
                        "not_running",
                        "queued",
                        "running",
                        "scheduled"
                    ],
                    "type": "string"
                },
                "pushed_at": {
                    "format": "date-time",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/Status"
                },
                "vcs_revision": {
                    "$ref": "#/definitions/Sha1"
                },
                "is_workflow_job": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Builds": {
            "items": {
                "$ref": "#/definitions/Build"
            },
            "type": "array"
        },
        "BuildWorkflow": {
            "properties": {
                "status": {
                    "$ref": "#/definitions/Status"
                },
                "created_at": {
                    "format": "date-time",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "Branch": {
            "properties": {
                "pusher_logins": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "latest_workflows": {
                    "$ref": "#/definitions/BuildWorkflow"
                },
                "latest_completed_workflows": {
                    "$ref": "#/definitions/BuildWorkflow"
                },
                "last_non_success": {
                    "$ref": "#/definitions/BuildSummary"
                },
                "last_success": {
                    "$ref": "#/definitions/BuildSummary"
                },
                "recent_builds": {
                    "$ref": "#/definitions/BuildSummary"
                },
                "running_builds": {
                    "$ref": "#/definitions/Builds"
                }
            },
            "type": "object"
        },
        "CommitDetail": {
            "properties": {
                "author_date": {
                    "format": "date-time",
                    "type": "string"
                },
                "author_email": {
                    "format": "email",
                    "type": "string"
                },
                "author_login": {
                    "type": "string"
                },
                "author_name": {
                    "type": "string"
                },
                "body": {
                    "type": "string"
                },
                "commit": {
                    "$ref": "#/definitions/Sha1"
                },
                "commit_url": {
                    "format": "uri",
                    "type": "string"
                },
                "committer_date": {
                    "format": "date-time",
                    "type": "string"
                },
                "committer_email": {
                    "format": "email",
                    "type": "string"
                },
                "committer_login": {
                    "type": "string"
                },
                "committer_name": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CommitDetails": {
            "items": {
                "$ref": "#/definitions/CommitDetail"
            },
            "type": "array"
        },
        "Envvar": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Envvars": {
            "items": {
                "$ref": "#/definitions/Envvar"
            },
            "type": "array"
        },
        "Key": {
            "properties": {
                "fingerprint": {
                    "type": "string"
                },
                "preferred": {
                    "type": "boolean"
                },
                "public_key": {
                    "type": "string"
                },
                "time": {
                    "description": "when the key was issued",
                    "format": "date-time",
                    "type": "string"
                },
                "type": {
                    "description": "can be 'deploy-key' or 'github-user-key'",
                    "enum": [
                        "deploy-key",
                        "github-user-key"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Keys": {
            "items": {
                "$ref": "#/definitions/Key"
            },
            "type": "array"
        },
        "Parallel": {
            "description": "The number of containers to use to run the build. Default is null and the project default is used.",
            "type": "string"
        },
        "PreviousBuild": {
            "description": "previous build",
            "properties": {
                "build_num": {
                    "type": "integer"
                },
                "build_time_millis": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/Status"
                }
            },
            "type": "object"
        },
        "Project": {
            "properties": {
                "aws": {
                    "$ref": "#/definitions/Aws"
                },
                "branches": {
                    "items": {
                        "$ref": "#/definitions/Branch"
                    },
                    "type": "array"
                },
                "campfire_notify_prefs": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "campfire_room": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "campfire_subdomain": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "campfire_token": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "compile": {
                    "type": "string"
                },
                "default_branch": {
                    "type": "string"
                },
                "dependencies": {
                    "type": "string"
                },
                "extra": {
                    "type": "string"
                },
                "feature_flags": {
                    "properties": {
                        "build-fork-prs": {
                            "type": "boolean"
                        },
                        "fleet": {
                            "type": "boolean"
                        },
                        "junit": {
                            "type": "boolean"
                        },
                        "oss": {
                            "type": "boolean"
                        },
                        "osx": {
                            "type": "boolean"
                        },
                        "set-github-status": {
                            "type": "boolean"
                        },
                        "trusty-beta": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "flowdock_api_token": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "followed": {
                    "type": "boolean"
                },
                "has_usable_key": {
                    "type": "boolean"
                },
                "heroku_deploy_user": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "hipchat_api_token": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "hipchat_notify": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "hipchat_notify_prefs": {
                    "type": "string"
                },
                "hipchat_room": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "irc_channel": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "irc_keyword": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "irc_notify_prefs": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "irc_password": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "irc_server": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "irc_username": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "language": {
                    "type": "string"
                },
                "oss": {
                    "type": "boolean"
                },
                "parallel": {
                    "type": "integer"
                },
                "reponame": {
                    "type": "string"
                },
                "scopes": {
                    "items": {
                        "enum": [
                            "all",
                            "none",
                            "read-settings",
                            "status",
                            "trigger-builds",
                            "view-builds",
                            "write-settings"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "setup": {
                    "type": "string"
                },
                "slack_api_token": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "slack_channel": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "slack_channel_override": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "slack_notify_prefs": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "slack_subdomain": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "slack_webhook_url": {
                    "format": "uri",
                    "type": "string"
                },
                "ssh_keys": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "test": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "vcs_type": {
                    "type": "string"
                },
                "vcs_url": {
                    "format": "uri",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Revision": {
            "description": "The specific revision to build.\nDefault is null and the head of the branch is used. Cannot be used with tag parameter.\n",
            "type": "string"
        },
        "Sha1": {
            "type": "string"
        },
        "Status": {
            "enum": [
                "canceled",
                "failed",
                "fixed",
                "infrastructure_fail",
                "no_tests",
                "not_run",
                "not_running",
                "queued",
                "retried",
                "running",
                "scheduled",
                "success",
                "timedout"
            ],
            "type": "string"
        },
        "StringOrNull": {
            "type": "string",
            "default": ""
        },
        "Tag": {
            "description": "The tag to build. Default is null. Cannot be used with revision parameter.",
            "type": "string"
        },
        "Tests": {
            "properties": {
                "tests": {
                    "items": {
                        "properties": {
                            "classname": {
                                "type": "string"
                            },
                            "file": {
                                "type": "string"
                            },
                            "message": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            },
                            "result": {
                                "$ref": "#/definitions/Status"
                            },
                            "run_time": {
                                "type": "number"
                            },
                            "source": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "User": {
            "properties": {
                "admin": {
                    "type": "boolean"
                },
                "all_emails": {
                    "items": {
                        "format": "email",
                        "type": "string"
                    },
                    "type": "array"
                },
                "analytics_id": {
                    "type": "string"
                },
                "avatar_url": {
                    "format": "uri",
                    "type": "string"
                },
                "basic_email_prefs": {
                    "type": "string"
                },
                "bitbucket": {
                    "type": "object"
                },
                "bitbucket_authorized": {
                    "type": "boolean"
                },
                "containers": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "format": "date-time",
                    "type": "string"
                },
                "days_left_in_trial": {
                    "type": "integer",
                    "format": "int64"
                },
                "dev_admin": {
                    "type": "boolean"
                },
                "enrolled_betas": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "first_vcs_authorized_client_id": {
                    "$ref": "#/definitions/StringOrNull"
                },
                "github_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "github_oauth_scopes": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "gravatar_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "heroku_api_key": {
                    "type": "string"
                },
                "identities": {
                    "properties": {
                        "github": {
                            "$ref": "#/definitions/GitHubIdentitiy"
                        },
                        "bitbucket": {
                            "$ref": "#/definitions/Identitiy"
                        },
                        "google": {
                            "$ref": "#/definitions/Identitiy"
                        }
                    },
                    "type": "object"
                },
                "in_beta_program": {
                    "type": "boolean"
                },
                "login": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "num_projects_followed": {
                    "type": "integer",
                    "format": "int64"
                },
                "organization_prefs": {
                    "type": "object"
                },
                "parallelism": {
                    "type": "integer",
                    "format": "int64"
                },
                "plan": {
                    "type": "string"
                },
                "projects": {
                    "type": "object"
                },
                "pusher_id": {
                    "type": "string"
                },
                "selected_email": {
                    "format": "email",
                    "type": "string"
                },
                "sign_in_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "student": {
                    "type": "boolean"
                },
                "trial_end": {
                    "format": "date-time",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Identitiy": {
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "user?": {
                    "type": "boolean"
                },
                "domain": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "authorized?": {
                    "type": "boolean"
                },
                "provider_id": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GitHubIdentitiy": {
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "external_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "user?": {
                    "type": "boolean"
                },
                "domain": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "authorized?": {
                    "type": "boolean"
                },
                "provider_id": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "parameters": {
        "branch": {
            "description": "The branch name should be url-encoded.",
            "in": "path",
            "name": "branch",
            "required": true,
            "type": "string"
        },
        "build_num": {
            "description": "XXXXXXXXXX",
            "in": "path",
            "name": "build_num",
            "required": true,
            "type": "integer"
        },
        "envvar_name": {
            "description": "XXXXXXXXXX",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
        },
        "filter": {
            "description": "Restricts which builds are returned.\nSet to \"completed\", \"successful\", \"failed\", \"running\", or defaults to no filter.\n",
            "enum": [
                "completed",
                "failed",
                "running",
                "successful"
            ],
            "in": "query",
            "name": "filter",
            "type": "string"
        },
        "fingerprint": {
            "description": "XXXXXXXXXX",
            "in": "path",
            "name": "fingerprint",
            "required": true,
            "type": "string"
        },
        "limit": {
            "default": 30,
            "description": "The number of builds to return. Maximum 100, defaults to 30.",
            "in": "query",
            "maximum": 100,
            "name": "limit",
            "type": "integer"
        },
        "offset": {
            "default": 0,
            "description": "The API returns builds starting from this offset, defaults to 0.",
            "in": "query",
            "name": "offset",
            "type": "integer"
        },
        "project": {
            "description": "XXXXXXXXX",
            "in": "path",
            "name": "project",
            "required": true,
            "type": "string"
        },
        "username": {
            "description": "XXXXXXXXX",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
        }
    },
    "responses": {
        "envvar": {
            "description": "XXX",
            "schema": {
                "$ref": "#/definitions/Envvar"
            }
        },
        "envvars": {
            "description": "XXX",
            "schema": {
                "$ref": "#/definitions/Envvars"
            }
        },
        "key": {
            "description": "checkout key",
            "schema": {
                "$ref": "#/definitions/Key"
            }
        }
    }
}
